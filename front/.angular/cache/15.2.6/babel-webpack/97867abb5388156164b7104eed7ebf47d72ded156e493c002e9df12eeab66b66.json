{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TaskService {\n  constructor() {\n    this.tasks = [{\n      id: 0,\n      userId: 0,\n      name: \"T'as les cramptés ?\",\n      description: \"Apanyan\",\n      finished: false\n    }];\n  }\n  getAllTasks() {\n    return this.tasks;\n  }\n  getTaskById(id) {\n    return this.tasks.find(task => task.id === id);\n  }\n  getLastId() {\n    if (this.tasks.length === 0) {\n      return 0;\n    }\n    const maxId = this.tasks.reduce((max, task) => Math.max(max, task.id), 0);\n    return maxId + 1;\n  }\n  addTask(newTask) {\n    this.tasks.push(newTask);\n  }\n  editTask(task) {\n    const index = this.getIndexById(task.id);\n    if (index > -1) this.tasks[index] = task;\n  }\n  setFinishTask(id, isFinished) {\n    const index = this.getIndexById(id);\n    if (index > -1) this.tasks[index].finished = isFinished;\n  }\n  deleteTask(id) {\n    const index = this.getIndexById(id);\n    if (index > -1) {\n      this.tasks.splice(index, 1);\n    }\n  }\n  getIndexById(id) {\n    return this.tasks.indexOf(this.getTaskById(id));\n  }\n  getTasksByUserId(userId) {\n    return this.tasks.filter(task => task.userId === userId);\n  }\n}\nTaskService.ɵfac = function TaskService_Factory(t) {\n  return new (t || TaskService)();\n};\nTaskService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TaskService,\n  factory: TaskService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,WAAW;EAItBC;IACE,IAAI,CAACC,KAAK,GAAG,CACX;MACEC,EAAE,EAAC,CAAC;MACJC,MAAM,EAAC,CAAC;MACRC,IAAI,EAAC,qBAAqB;MAC1BC,WAAW,EAAC,SAAS;MACrBC,QAAQ,EAAC;KACV,CACF;EACH;EAEAC,WAAW;IACT,OAAO,IAAI,CAACN,KAAK;EACnB;EAEAO,WAAW,CAACN,EAAS;IACnB,OAAO,IAAI,CAACD,KAAK,CAACQ,IAAI,CAAEC,IAAU,IAAKA,IAAI,CAACR,EAAE,KAAKA,EAAE,CAAS;EAChE;EAEAS,SAAS;IACP,IAAI,IAAI,CAACV,KAAK,CAACW,MAAM,KAAK,CAAC,EAAE;MAC3B,OAAO,CAAC;;IAEV,MAAMC,KAAK,GAAY,IAAI,CAACZ,KAAK,CAACa,MAAM,CAAC,CAACC,GAAY,EAAEL,IAAU,KAAKM,IAAI,CAACD,GAAG,CAACA,GAAG,EAAEL,IAAI,CAACR,EAAE,CAAC,EAAE,CAAC,CAAC;IACjG,OAAOW,KAAK,GAAG,CAAC;EAClB;EAEAI,OAAO,CAACC,OAAa;IACnB,IAAI,CAACjB,KAAK,CAACkB,IAAI,CAACD,OAAO,CAAC;EAC1B;EAEAE,QAAQ,CAACV,IAAU;IACjB,MAAMW,KAAK,GAAY,IAAI,CAACC,YAAY,CAACZ,IAAI,CAACR,EAAE,CAAC;IACjD,IAAImB,KAAK,GAAG,CAAC,CAAC,EACZ,IAAI,CAACpB,KAAK,CAACoB,KAAK,CAAC,GAAGX,IAAI;EAC5B;EAEAa,aAAa,CAACrB,EAAS,EAACsB,UAAkB;IACxC,MAAMH,KAAK,GAAY,IAAI,CAACC,YAAY,CAACpB,EAAE,CAAC;IAC5C,IAAImB,KAAK,GAAG,CAAC,CAAC,EACZ,IAAI,CAACpB,KAAK,CAACoB,KAAK,CAAC,CAACf,QAAQ,GAAGkB,UAAU;EAC3C;EAEAC,UAAU,CAACvB,EAAS;IAClB,MAAMmB,KAAK,GAAY,IAAI,CAACC,YAAY,CAACpB,EAAE,CAAC;IAC5C,IAAImB,KAAK,GAAG,CAAC,CAAC,EAAE;MACd,IAAI,CAACpB,KAAK,CAACyB,MAAM,CAACL,KAAK,EAAE,CAAC,CAAC;;EAE/B;EAEAC,YAAY,CAACpB,EAAS;IACpB,OAAO,IAAI,CAACD,KAAK,CAAC0B,OAAO,CAAC,IAAI,CAACnB,WAAW,CAACN,EAAE,CAAC,CAAC;EACjD;EACA0B,gBAAgB,CAACzB,MAAc;IAC7B,OAAO,IAAI,CAACF,KAAK,CAAC4B,MAAM,CAAEnB,IAAU,IAAcA,IAAI,CAACP,MAAM,KAAKA,MAAM,CAAC;EAC3E;;AA5DWJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;EAAAgC,YAFV;AAAM","names":["TaskService","constructor","tasks","id","userId","name","description","finished","getAllTasks","getTaskById","find","task","getLastId","length","maxId","reduce","max","Math","addTask","newTask","push","editTask","index","getIndexById","setFinishTask","isFinished","deleteTask","splice","indexOf","getTasksByUserId","filter","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Irfan\\Desktop\\todoumlist\\front\\src\\app\\core\\services\\task.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Task} from \"../models/task.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskService {\r\n\r\n  private tasks!: Task[];\r\n\r\n  constructor() {\r\n    this.tasks = [\r\n      {\r\n        id:0,\r\n        userId:0,\r\n        name:\"T'as les cramptés ?\",\r\n        description:\"Apanyan\",\r\n        finished:false\r\n      }\r\n    ]\r\n  }\r\n\r\n  getAllTasks(): Task[] {\r\n    return this.tasks;\r\n  }\r\n\r\n  getTaskById(id:number): Task{\r\n    return this.tasks.find((task: Task) => task.id === id) as Task;\r\n  }\r\n\r\n  getLastId():number{\r\n    if (this.tasks.length === 0) {\r\n      return 0;\r\n    }\r\n    const maxId : number = this.tasks.reduce((max : number, task :Task) => Math.max(max, task.id), 0);\r\n    return maxId + 1;\r\n  }\r\n\r\n  addTask(newTask: Task):void{\r\n    this.tasks.push(newTask);\r\n  }\r\n\r\n  editTask(task: Task):void{\r\n    const index : number = this.getIndexById(task.id);\r\n    if (index > -1)\r\n      this.tasks[index] = task;\r\n  }\r\n\r\n  setFinishTask(id:number,isFinished:boolean):void{\r\n    const index : number = this.getIndexById(id);\r\n    if (index > -1)\r\n      this.tasks[index].finished = isFinished;\r\n  }\r\n\r\n  deleteTask(id:number) : void{\r\n    const index : number = this.getIndexById(id);\r\n    if (index > -1) {\r\n      this.tasks.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  getIndexById(id:number):number{\r\n    return this.tasks.indexOf(this.getTaskById(id));\r\n  }\r\n  getTasksByUserId(userId: number): Task[] {\r\n    return this.tasks.filter((task: Task): boolean => task.userId === userId);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}