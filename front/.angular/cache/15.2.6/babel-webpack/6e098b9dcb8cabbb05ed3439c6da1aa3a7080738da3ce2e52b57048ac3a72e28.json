{"ast":null,"code":"import { map } from \"rxjs\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../../core/services/task.service\";\nimport * as i4 from \"@angular/common\";\nfunction EditTaskComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"div\", 15)(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 11);\n    i0.ɵɵelement(5, \"input\", 16);\n    i0.ɵɵelementStart(6, \"button\", 17);\n    i0.ɵɵelement(7, \"i\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 19);\n    i0.ɵɵelement(9, \"i\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 21);\n    i0.ɵɵelement(11, \"i\", 22);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const previewTask_r1 = ctx.ngIf;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(previewTask_r1.name);\n  }\n}\nexport class EditTaskComponent {\n  constructor(router, formBuilder, taskService, route) {\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.taskService = taskService;\n    this.route = route;\n  }\n  ngOnInit() {\n    const id = +this.route.snapshot.params['id'];\n    this.taskToEdit = this.taskService.getTaskById(id);\n    this.nameControl = new FormControl(this.taskToEdit.name, Validators.required);\n    this.descriptionControl = new FormControl(this.taskToEdit.description, Validators.required);\n    this.editTaskForm = this.formBuilder.group({\n      name: this.nameControl,\n      description: this.descriptionControl\n    }, {\n      updateOn: 'change'\n    });\n    this.previewTask$ = this.editTaskForm.valueChanges.pipe(map(task => ({\n      name: task.name,\n      userId: 0,\n      description: task.description,\n      id: 0,\n      finished: false\n    })));\n  }\n  onEditTask() {\n    const formValue = this.editTaskForm.value;\n    this.taskToEdit.name = formValue['name'];\n    this.taskToEdit.description = formValue['description'];\n    this.taskService.editTask(this.taskToEdit);\n    this.router.navigateByUrl(\"\");\n  }\n  onReturn() {\n    this.router.navigateByUrl(\"\");\n  }\n}\nEditTaskComponent.ɵfac = function EditTaskComponent_Factory(t) {\n  return new (t || EditTaskComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.TaskService), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\nEditTaskComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditTaskComponent,\n  selectors: [[\"app-edit-task\"]],\n  decls: 20,\n  vars: 7,\n  consts: [[1, \"container\"], [1, \"edit-task\", \"border-2\", \"mx-auto\", \"text-light\", \"border-2\", \"rounded-3\", \"p-4\"], [3, \"formGroup\"], [1, \"form-floating\", \"mb-3\"], [\"type\", \"text\", \"id\", \"task-name\", \"required\", \"\", 1, \"form-control\", \"text-white\", 3, \"formControl\"], [\"for\", \"task-name\"], [\"id\", \"task-description\", \"required\", \"\", 1, \"form-control\", 3, \"formControl\"], [\"for\", \"task-description\"], [1, \"clearfix\"], [1, \"float-start\"], [\"type\", \"button\", 1, \"btn\", \"super-dark\", \"my-border-dark\", \"rounded-4\", 3, \"click\"], [1, \"float-end\"], [\"type\", \"submit\", 1, \"btn\", \"super-dark\", \"rounded-4\", 3, \"disabled\", \"click\"], [\"class\", \"preview-task ms-auto me-auto text-white p-4 my-5 rounded-4\", 4, \"ngIf\"], [1, \"preview-task\", \"ms-auto\", \"me-auto\", \"text-white\", \"p-4\", \"my-5\", \"rounded-4\"], [1, \"div-list-item\"], [\"checked\", \"\", \"disabled\", \"\", \"type\", \"checkbox\", 1, \"form-check-input\", \"me-5\"], [1, \"btn\", \"btn-success\", \"me-1\", \"disabled\"], [1, \"fa-solid\", \"fa-eye\", \"fa-xl\"], [1, \"btn\", \"btn-primary\", \"me-1\", \"disabled\"], [1, \"fa-solid\", \"fa-pen-to-square\", \"fa-xl\"], [1, \"btn\", \"btn-danger\", \"ms-1\", \"disabled\"], [1, \"fa-solid\", \"fa-trash\", \"fa-xl\"]],\n  template: function EditTaskComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2)(3, \"div\", 3);\n      i0.ɵɵelement(4, \"input\", 4);\n      i0.ɵɵelementStart(5, \"label\", 5);\n      i0.ɵɵtext(6, \"T\\u00E2che\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 3);\n      i0.ɵɵelement(8, \"textarea\", 6);\n      i0.ɵɵelementStart(9, \"label\", 7);\n      i0.ɵɵtext(10, \"Description\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"div\", 8)(12, \"div\", 9)(13, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function EditTaskComponent_Template_button_click_13_listener() {\n        return ctx.onReturn();\n      });\n      i0.ɵɵtext(14, \"Retour\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\", 11)(16, \"button\", 12);\n      i0.ɵɵlistener(\"click\", function EditTaskComponent_Template_button_click_16_listener() {\n        return ctx.onEditTask();\n      });\n      i0.ɵɵtext(17, \"Sauvegarder\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtemplate(18, EditTaskComponent_div_18_Template, 12, 1, \"div\", 13);\n      i0.ɵɵpipe(19, \"async\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.editTaskForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formControl\", ctx.nameControl);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.descriptionControl);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"disabled\", ctx.editTaskForm.invalid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(19, 5, ctx.previewTask$));\n    }\n  },\n  dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.FormControlDirective, i2.FormGroupDirective, i4.AsyncPipe],\n  styles: [\".edit-task[_ngcontent-%COMP%] {\\n  background-color: #3c3c3c;\\n  margin-top: 12em;\\n}\\n\\ntextarea[_ngcontent-%COMP%] {\\n  height: 13rem;\\n}\\n\\n.preview-task[_ngcontent-%COMP%] {\\n  border: 4px solid #3c3c3c;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGFza3MvY29tcG9uZW50cy9lZGl0LXRhc2svZWRpdC10YXNrLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UseUJBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtBQUNGOztBQUVBO0VBQ0UseUJBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5lZGl0LXRhc2t7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNjM2MzYztcclxuICBtYXJnaW4tdG9wOjEyZW07XHJcbn1cclxuXHJcbnRleHRhcmVhe1xyXG4gIGhlaWdodDoxM3JlbTtcclxufVxyXG5cclxuLnByZXZpZXctdGFza3tcclxuICBib3JkZXI6IDRweCBzb2xpZCAjM2MzYzNjO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["map","FormControl","Validators","i0","EditTaskComponent","constructor","router","formBuilder","taskService","route","ngOnInit","id","snapshot","params","taskToEdit","getTaskById","nameControl","name","required","descriptionControl","description","editTaskForm","group","updateOn","previewTask$","valueChanges","pipe","task","userId","finished","onEditTask","formValue","value","editTask","navigateByUrl","onReturn","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Irfan\\Desktop\\todoumlist\\front\\src\\app\\tasks\\components\\edit-task\\edit-task.component.ts","C:\\Users\\Irfan\\Desktop\\todoumlist\\front\\src\\app\\tasks\\components\\edit-task\\edit-task.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {map, Observable} from \"rxjs\";\nimport {Task} from \"../../../core/models/task.model\";\nimport { OnInit } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {TaskService} from \"../../../core/services/task.service\";\n\n@Component({\n  selector: 'app-edit-task',\n  templateUrl: './edit-task.component.html',\n  styleUrls: ['./edit-task.component.scss']\n})\nexport class EditTaskComponent {\n\n  taskToEdit!: Task;\n  editTaskForm!: FormGroup;\n  previewTask$!: Observable<Task>;\n  nameControl!: FormControl;\n  descriptionControl!: FormControl;\n  constructor(private router:Router, private formBuilder: FormBuilder, private taskService:TaskService, private route:ActivatedRoute) {}\n\n  ngOnInit():void{\n    const id:number = +this.route.snapshot.params['id'];\n    this.taskToEdit = this.taskService.getTaskById(id);\n    this.nameControl = new FormControl(this.taskToEdit.name, Validators.required);\n    this.descriptionControl = new FormControl(this.taskToEdit.description, Validators.required);\n    this.editTaskForm = this.formBuilder.group({\n      name: this.nameControl,\n      description:this.descriptionControl\n    }, {\n      updateOn: 'change'\n    });\n    this.previewTask$ = this.editTaskForm.valueChanges.pipe(\n      map((task: Task) => ({\n        name:task.name,\n        userId:0,\n        description:task.description,\n        id:0,\n        finished:false\n      })));\n  }\n  onEditTask():void{\n    const formValue = this.editTaskForm!.value;\n    this.taskToEdit.name = formValue['name'];\n    this.taskToEdit.description = formValue['description'];\n    this.taskService.editTask(this.taskToEdit);\n    this.router.navigateByUrl(\"\");\n  }\n\n  onReturn() : void {\n    this.router.navigateByUrl(\"\");\n  }\n}\n","<div class=\"container\">\n  <div class=\"edit-task border-2 mx-auto text-light border-2 rounded-3 p-4\">\n    <form [formGroup]=\"editTaskForm\">\n      <div class=\"form-floating mb-3\">\n        <input type=\"text\" class=\"form-control text-white\" id=\"task-name\" [formControl]=\"nameControl\" required>\n        <label for=\"task-name\">Tâche</label>\n      </div>\n      <div class=\"form-floating mb-3\">\n        <textarea class=\"form-control\" id=\"task-description\" [formControl]=\"descriptionControl\" required></textarea>\n        <label for=\"task-description\">Description</label>\n      </div>\n      <div class=\"clearfix\">\n        <div class=\"float-start\">\n          <button type=\"button\" (click)=\"onReturn()\" class=\"btn super-dark my-border-dark rounded-4\">Retour</button>\n        </div>\n        <div class=\"float-end\">\n          <button type=\"submit\" (click)=\"onEditTask()\" class=\"btn super-dark rounded-4\" [disabled]=\"editTaskForm.invalid\">Sauvegarder</button>\n        </div>\n      </div>\n    </form>\n  </div>\n  <div class=\"preview-task ms-auto me-auto text-white p-4 my-5 rounded-4\" *ngIf=\"previewTask$ | async as previewTask\">\n    <div class=\"div-list-item\">\n      <p>{{previewTask.name}}</p>\n      <div class=\"float-end\">\n        <input class=\"form-check-input me-5\" checked disabled type=\"checkbox\">\n        <button class=\"btn btn-success me-1 disabled\"><i class=\"fa-solid fa-eye fa-xl\"></i></button>\n        <button class=\"btn btn-primary me-1 disabled\"><i class=\"fa-solid fa-pen-to-square fa-xl\"></i></button>\n        <button class=\"btn btn-danger ms-1 disabled\"><i class=\"fa-solid fa-trash fa-xl\"></i></button>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}