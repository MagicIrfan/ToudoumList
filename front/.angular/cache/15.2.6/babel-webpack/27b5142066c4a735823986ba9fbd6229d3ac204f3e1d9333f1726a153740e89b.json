{"ast":null,"code":"import { FormControl, Validators } from \"@angular/forms\";\nimport { User } from \"../../../core/models/user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../core/services/auth.service\";\nimport * as i2 from \"../../../core/services/user.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\nfunction InscriptionComponent_p_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errors);\n  }\n}\nexport class InscriptionComponent {\n  constructor(authService, userService, router, formBuilder) {\n    this.authService = authService;\n    this.userService = userService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n  }\n  ngOnInit() {\n    this.emailControl = new FormControl('', [Validators.required, Validators.email]);\n    this.passwordControl = new FormControl('', [Validators.required, Validators.minLength(4)]);\n    this.usernameControl = new FormControl('', [Validators.required, Validators.minLength(5)]);\n    this.inscriptionForm = this.formBuilder.group({\n      email: this.emailControl,\n      name: this.usernameControl,\n      password: this.passwordControl\n    }, {\n      updateOn: 'change'\n    });\n    this.errors = \"\";\n  }\n  onCreateUser() {\n    const formValue = this.inscriptionForm.value;\n    const email = formValue['email'];\n    const username = formValue['name'];\n    const password = formValue['password'];\n    console.log(formValue);\n    console.log(this.userService.isUserExists2(email, username));\n    if (!this.userService.isUserExists2(email, username)) {\n      const newUser = new User(this.userService.getLastId(), username, email, password);\n      this.userService.addUser(newUser);\n      console.log(this.userService.getAllUsers());\n      this.router.navigateByUrl(\"/auth/connexion\");\n    } else {\n      this.errors = \"L'email ou le nom d'utilisateur existe déjà\";\n      this.router.navigateByUrl(\"/auth/inscription\");\n    }\n  }\n}\nInscriptionComponent.ɵfac = function InscriptionComponent_Factory(t) {\n  return new (t || InscriptionComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.UsersService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.FormBuilder));\n};\nInscriptionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: InscriptionComponent,\n  selectors: [[\"app-inscription\"]],\n  decls: 28,\n  vars: 6,\n  consts: [[1, \"container\"], [1, \"row\", \"justify-content-center\", \"mt-5\"], [1, \"col-md-6\"], [1, \"card\", \"dark\"], [1, \"card-body\"], [1, \"d-flex\", \"justify-content-center\", \"align-items-center\", \"mb-4\"], [\"ngSrc\", \"/assets/images/person.png\", \"alt\", \"Avatar\", \"width\", \"200\", \"height\", \"200\", 1, \"rounded-circle\", \"me-3\"], [\"class\", \"text-danger text-center\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-floating\", \"mb-3\"], [\"type\", \"text\", \"id\", \"username\", \"required\", \"\", 1, \"form-control\", 3, \"formControl\"], [\"for\", \"username\"], [\"type\", \"email\", \"id\", \"email\", \"required\", \"\", 1, \"form-control\", 3, \"formControl\"], [\"for\", \"email\"], [\"type\", \"password\", \"id\", \"password\", \"required\", \"\", 1, \"form-control\", 3, \"formControl\"], [\"for\", \"password\"], [1, \"d-grid\", \"gap-2\"], [\"type\", \"submit\", 1, \"btn\", \"btn-dark\", 3, \"disabled\"], [1, \"mt-3\", \"mb-0\", \"text-center\"], [\"routerLink\", \"/auth/connexion\"], [1, \"text-danger\", \"text-center\"]],\n  template: function InscriptionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5);\n      i0.ɵɵelement(6, \"img\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(7, InscriptionComponent_p_7_Template, 2, 1, \"p\", 7);\n      i0.ɵɵelementStart(8, \"form\", 8);\n      i0.ɵɵlistener(\"ngSubmit\", function InscriptionComponent_Template_form_ngSubmit_8_listener() {\n        return ctx.onCreateUser();\n      });\n      i0.ɵɵelementStart(9, \"div\", 9);\n      i0.ɵɵelement(10, \"input\", 10);\n      i0.ɵɵelementStart(11, \"label\", 11);\n      i0.ɵɵtext(12, \"Nom d'utilisateur\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"div\", 9);\n      i0.ɵɵelement(14, \"input\", 12);\n      i0.ɵɵelementStart(15, \"label\", 13);\n      i0.ɵɵtext(16, \"Adresse email\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"div\", 9);\n      i0.ɵɵelement(18, \"input\", 14);\n      i0.ɵɵelementStart(19, \"label\", 15);\n      i0.ɵɵtext(20, \"Mot de passe\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"div\", 16)(22, \"button\", 17);\n      i0.ɵɵtext(23, \"S'inscrire\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(24, \"p\", 18);\n      i0.ɵɵtext(25, \"D\\u00E9j\\u00E0 un compte ? \");\n      i0.ɵɵelementStart(26, \"a\", 19);\n      i0.ɵɵtext(27, \"Se connecter maintenant\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.errors.length > 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.inscriptionForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formControl\", ctx.usernameControl);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.emailControl);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formControl\", ctx.passwordControl);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"disabled\", ctx.inscriptionForm.invalid);\n    }\n  },\n  dependencies: [i5.NgIf, i3.RouterLink, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.FormControlDirective, i4.FormGroupDirective, i5.NgOptimizedImage],\n  styles: [\".container[_ngcontent-%COMP%] {\\n  margin-top: 6em;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXV0aC9jb21wb25lbnRzL2luc2NyaXB0aW9uL2luc2NyaXB0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBQTtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lcntcclxuICBtYXJnaW4tdG9wOjZlbTtcclxufVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","Validators","User","i0","InscriptionComponent","constructor","authService","userService","router","formBuilder","ngOnInit","emailControl","required","email","passwordControl","minLength","usernameControl","inscriptionForm","group","name","password","updateOn","errors","onCreateUser","formValue","value","username","console","log","isUserExists2","newUser","getLastId","addUser","getAllUsers","navigateByUrl","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Irfan\\Desktop\\todoumlist\\front\\src\\app\\auth\\components\\inscription\\inscription.component.ts","C:\\Users\\Irfan\\Desktop\\todoumlist\\front\\src\\app\\auth\\components\\inscription\\inscription.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {AuthService} from \"../../../core/services/auth.service\";\nimport {UsersService} from \"../../../core/services/user.service\";\nimport {Router} from \"@angular/router\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {User} from \"../../../core/models/user.model\";\n\n@Component({\n  selector: 'app-inscription',\n  templateUrl: './inscription.component.html',\n  styleUrls: ['./inscription.component.scss']\n})\nexport class InscriptionComponent implements OnInit {\n\n  inscriptionForm!: FormGroup;\n  emailControl!:FormControl;\n  passwordControl!:FormControl;\n  usernameControl!:FormControl;\n  errors!:string;\n\n  constructor(private authService: AuthService, private userService: UsersService, private router : Router, private formBuilder: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.emailControl = new FormControl('', [\n      Validators.required,\n      Validators.email\n    ]);\n\n    this.passwordControl = new FormControl('', [\n      Validators.required,\n      Validators.minLength(4)\n    ]);\n\n    this.usernameControl = new FormControl('', [\n      Validators.required,\n      Validators.minLength(5)\n    ]);\n\n    this.inscriptionForm = this.formBuilder.group({\n      email: this.emailControl,\n      name: this.usernameControl,\n      password: this.passwordControl\n    }, {\n      updateOn: 'change'\n    });\n    this.errors = \"\";\n  }\n\n  onCreateUser() :void {\n    const formValue = this.inscriptionForm!.value;\n    const email : string = formValue['email'];\n    const username : string = formValue['name'];\n    const password : string = formValue['password'];\n    console.log(formValue);\n    console.log(this.userService.isUserExists2(email,username));\n    if(!this.userService.isUserExists2(email,username)){\n      const newUser : User = new User(this.userService.getLastId(),username,email,password);\n      this.userService.addUser(newUser);\n      console.log(this.userService.getAllUsers());\n      this.router.navigateByUrl(\"/auth/connexion\");\n    }\n    else{\n      this.errors = \"L'email ou le nom d'utilisateur existe déjà\";\n      this.router.navigateByUrl(\"/auth/inscription\");\n    }\n  }\n}\n","<div class=\"container\">\n  <div class=\"row justify-content-center mt-5\">\n    <div class=\"col-md-6\">\n      <div class=\"card dark\">\n        <div class=\"card-body\">\n          <div class=\"d-flex justify-content-center align-items-center mb-4\">\n            <img ngSrc=\"/assets/images/person.png\" alt=\"Avatar\" class=\"rounded-circle me-3\" width=\"200\" height=\"200\">\n          </div>\n          <p class=\"text-danger text-center\" *ngIf=\"errors.length > 0\">{{errors}}</p>\n          <form [formGroup]=\"inscriptionForm\" (ngSubmit)=\"onCreateUser()\">\n            <div class=\"form-floating mb-3\">\n              <input type=\"text\" class=\"form-control\" id=\"username\" [formControl]=\"usernameControl\" required>\n              <label for=\"username\">Nom d'utilisateur</label>\n            </div>\n            <div class=\"form-floating mb-3\">\n              <input type=\"email\" class=\"form-control\" id=\"email\" [formControl]=\"emailControl\" required>\n              <label for=\"email\">Adresse email</label>\n            </div>\n            <div class=\"form-floating mb-3\">\n              <input type=\"password\" class=\"form-control\" id=\"password\" [formControl]=\"passwordControl\" required>\n              <label for=\"password\">Mot de passe</label>\n            </div>\n            <div class=\"d-grid gap-2\">\n              <button type=\"submit\" class=\"btn btn-dark\" [disabled]=\"inscriptionForm.invalid\">S'inscrire</button>\n            </div>\n          </form>\n          <p class=\"mt-3 mb-0 text-center\">Déjà un compte ? <a routerLink=\"/auth/connexion\">Se connecter maintenant</a></p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}