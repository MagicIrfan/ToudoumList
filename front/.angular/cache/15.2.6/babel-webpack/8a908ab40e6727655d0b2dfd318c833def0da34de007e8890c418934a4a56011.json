{"ast":null,"code":"import { FormControl, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../core/services/auth.service\";\nimport * as i2 from \"../../../core/services/user.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\nfunction ConnectionComponent_p_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errors);\n  }\n}\nfunction ConnectionComponent_p_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 20);\n    i0.ɵɵtext(1, \"L'email est invalide\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ConnectionComponent {\n  constructor(authService, userService, router, formBuilder) {\n    this.authService = authService;\n    this.userService = userService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n  }\n  ngOnInit() {\n    this.emailControl = new FormControl('', [Validators.required, Validators.email]);\n    this.passwordControl = new FormControl('', [Validators.required, Validators.minLength(4)]);\n    this.connectionForm = this.formBuilder.group({\n      email: this.emailControl,\n      password: this.passwordControl\n    }, {\n      updateOn: 'change'\n    });\n    this.errors = \"\";\n  }\n  onLogin() {\n    const formValue = this.connectionForm.value;\n    console.log(formValue);\n    console.log(this.userService.getAllUsers());\n    if (this.userService.isUserExists(formValue['email'], formValue['password'])) {\n      this.authService.login();\n      this.router.navigateByUrl(\"/\");\n    } else {\n      this.errors = \"Email ou mot de passe incorrect !\";\n      this.router.navigateByUrl(\"/auth/connexion\");\n    }\n  }\n}\nConnectionComponent.ɵfac = function ConnectionComponent_Factory(t) {\n  return new (t || ConnectionComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.UsersService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.FormBuilder));\n};\nConnectionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ConnectionComponent,\n  selectors: [[\"app-connection\"]],\n  decls: 25,\n  vars: 4,\n  consts: [[1, \"container\"], [1, \"row\", \"justify-content-center\", \"mt-5\"], [1, \"col-md-6\"], [1, \"card\", \"dark\"], [1, \"card-body\"], [1, \"d-flex\", \"justify-content-center\", \"align-items-center\", \"mb-4\"], [\"ngSrc\", \"/assets/images/person.png\", \"alt\", \"Avatar\", \"width\", \"200\", \"height\", \"200\", 1, \"rounded-circle\", \"me-3\"], [\"class\", \"text-danger text-center\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-floating\", \"mb-3\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"email\"], [\"class\", \"text-danger text-small mt-2\", 4, \"ngIf\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"password\"], [1, \"d-grid\", \"gap-2\"], [\"type\", \"submit\", 1, \"btn\", \"btn-dark\", 3, \"disabled\"], [1, \"mt-3\", \"text-center\"], [\"routerLink\", \"/auth/inscription\"], [1, \"text-danger\", \"text-center\"], [1, \"text-danger\", \"text-small\", \"mt-2\"]],\n  template: function ConnectionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5);\n      i0.ɵɵelement(6, \"img\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(7, ConnectionComponent_p_7_Template, 2, 1, \"p\", 7);\n      i0.ɵɵelementStart(8, \"form\", 8);\n      i0.ɵɵlistener(\"ngSubmit\", function ConnectionComponent_Template_form_ngSubmit_8_listener() {\n        return ctx.onLogin();\n      });\n      i0.ɵɵelementStart(9, \"div\", 9);\n      i0.ɵɵelement(10, \"input\", 10);\n      i0.ɵɵelementStart(11, \"label\", 11);\n      i0.ɵɵtext(12, \"Adresse email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(13, ConnectionComponent_p_13_Template, 2, 0, \"p\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 9);\n      i0.ɵɵelement(15, \"input\", 13);\n      i0.ɵɵelementStart(16, \"label\", 14);\n      i0.ɵɵtext(17, \"Mot de passe\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"div\", 15)(19, \"button\", 16);\n      i0.ɵɵtext(20, \"Se connecter\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(21, \"p\", 17);\n      i0.ɵɵtext(22, \"Pas de compte ? \");\n      i0.ɵɵelementStart(23, \"a\", 18);\n      i0.ɵɵtext(24, \"S'inscrire maintenant\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.errors.length > 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.connectionForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.emailControl.errors == null ? null : ctx.emailControl.errors[\"email\"]);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"disabled\", ctx.connectionForm.invalid);\n    }\n  },\n  dependencies: [i5.NgIf, i3.RouterLink, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.FormGroupDirective, i4.FormControlName, i5.NgOptimizedImage],\n  styles: [\".container[_ngcontent-%COMP%] {\\n  margin-top: 8em;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXV0aC9jb21wb25lbnRzL2Nvbm5lY3Rpb24vY29ubmVjdGlvbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXJ7XHJcbiAgbWFyZ2luLXRvcDo4ZW07XHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,EAAaC,UAAU,QAAO,gBAAgB;;;;;;;;;ICOpEC,6BAA6D;IAAAA,YAAU;IAAAA,iBAAI;;;;IAAdA,eAAU;IAAVA,mCAAU;;;;;IAKnEA,6BAA8E;IAAAA,oCAAoB;IAAAA,iBAAI;;;ADHpH,OAAM,MAAOC,mBAAmB;EAM9BC,YAAoBC,WAAwB,EAAUC,WAAyB,EAAUC,MAAe,EAAUC,WAAwB;IAAtH,gBAAW,GAAXH,WAAW;IAAuB,gBAAW,GAAXC,WAAW;IAAwB,WAAM,GAANC,MAAM;IAAmB,gBAAW,GAAXC,WAAW;EAAiB;EAE9IC,QAAQ;IACN,IAAI,CAACC,YAAY,GAAG,IAAIV,WAAW,CAAC,EAAE,EAAE,CACtCC,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACW,KAAK,CACjB,CAAC;IAEF,IAAI,CAACC,eAAe,GAAG,IAAIb,WAAW,CAAC,EAAE,EAAE,CACzCC,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,CACxB,CAAC;IACF,IAAI,CAACC,cAAc,GAAG,IAAI,CAACP,WAAW,CAACQ,KAAK,CAAC;MAC3CJ,KAAK,EAAE,IAAI,CAACF,YAAY;MACxBO,QAAQ,EAAE,IAAI,CAACJ;KAChB,EAAE;MACDK,QAAQ,EAAE;KACX,CAAC;IACF,IAAI,CAACC,MAAM,GAAG,EAAE;EAClB;EAEAC,OAAO;IACH,MAAMC,SAAS,GAAG,IAAI,CAACN,cAAe,CAACO,KAAK;IAC5CC,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;IACtBE,OAAO,CAACC,GAAG,CAAC,IAAI,CAAClB,WAAW,CAACmB,WAAW,EAAE,CAAC;IAC3C,IAAG,IAAI,CAACnB,WAAW,CAACoB,YAAY,CAACL,SAAS,CAAC,OAAO,CAAC,EAACA,SAAS,CAAC,UAAU,CAAC,CAAC,EAAC;MACzE,IAAI,CAAChB,WAAW,CAACsB,KAAK,EAAE;MACxB,IAAI,CAACpB,MAAM,CAACqB,aAAa,CAAC,GAAG,CAAC;KAC/B,MACG;MACF,IAAI,CAACT,MAAM,GAAG,mCAAmC;MACjD,IAAI,CAACZ,MAAM,CAACqB,aAAa,CAAC,iBAAiB,CAAC;;EAGlD;;AAxCWzB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAA0B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVhC/B,8BAAuB;MAMXA,yBAAyG;MAC3GA,iBAAM;MACNA,gEAA2E;MAC3EA,+BAA0D;MAAvBA;QAAA,OAAYgC,aAAS;MAAA,EAAC;MACvDhC,8BAAgC;MAC9BA,6BAAqF;MACrFA,kCAAmB;MAAAA,8BAAa;MAAAA,iBAAQ;MACxCA,mEAAsG;MACxGA,iBAAM;MACNA,+BAAgC;MAC9BA,6BAA8F;MAC9FA,kCAAsB;MAAAA,6BAAY;MAAAA,iBAAQ;MAE5CA,gCAA0B;MACuDA,6BAAY;MAAAA,iBAAS;MAGxGA,8BAA4B;MAAAA,iCAAgB;MAAAA,8BAAkC;MAAAA,sCAAqB;MAAAA,iBAAI;;;MAfnEA,eAAuB;MAAvBA,4CAAuB;MACrDA,eAA4B;MAA5BA,8CAA4B;MAIUA,eAAoC;MAApCA,gGAAoC;MAOjCA,eAAmC;MAAnCA,qDAAmC","names":["FormControl","Validators","i0","ConnectionComponent","constructor","authService","userService","router","formBuilder","ngOnInit","emailControl","required","email","passwordControl","minLength","connectionForm","group","password","updateOn","errors","onLogin","formValue","value","console","log","getAllUsers","isUserExists","login","navigateByUrl","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Irfan\\Desktop\\todoumlist\\front\\src\\app\\auth\\components\\connection\\connection.component.ts","C:\\Users\\Irfan\\Desktop\\todoumlist\\front\\src\\app\\auth\\components\\connection\\connection.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Router} from \"@angular/router\";\nimport {UsersService} from \"../../../core/services/user.service\";\nimport {AuthService} from \"../../../core/services/auth.service\";\n@Component({\n  selector: 'app-connection',\n  templateUrl: './connection.component.html',\n  styleUrls: ['./connection.component.scss']\n})\nexport class ConnectionComponent implements OnInit {\n\n  connectionForm!: FormGroup;\n  emailControl!:FormControl;\n  passwordControl!:FormControl;\n  errors!: string;\n  constructor(private authService: AuthService, private userService: UsersService, private router : Router, private formBuilder: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.emailControl = new FormControl('', [\n      Validators.required,\n      Validators.email\n    ]);\n\n    this.passwordControl = new FormControl('', [\n      Validators.required,\n      Validators.minLength(4)\n    ]);\n    this.connectionForm = this.formBuilder.group({\n      email: this.emailControl,\n      password: this.passwordControl\n    }, {\n      updateOn: 'change'\n    });\n    this.errors = \"\";\n  }\n\n  onLogin() : void{\n      const formValue = this.connectionForm!.value;\n      console.log(formValue);\n      console.log(this.userService.getAllUsers());\n      if(this.userService.isUserExists(formValue['email'],formValue['password'])){\n        this.authService.login();\n        this.router.navigateByUrl(\"/\");\n      }\n      else{\n        this.errors = \"Email ou mot de passe incorrect !\";\n        this.router.navigateByUrl(\"/auth/connexion\");\n      }\n\n  }\n}\n","<div class=\"container\">\n  <div class=\"row justify-content-center mt-5\">\n    <div class=\"col-md-6\">\n      <div class=\"card dark\">\n        <div class=\"card-body\">\n          <div class=\"d-flex justify-content-center align-items-center mb-4\">\n            <img ngSrc=\"/assets/images/person.png\" alt=\"Avatar\" class=\"rounded-circle me-3\" width=\"200\" height=\"200\">\n          </div>\n          <p class=\"text-danger text-center\" *ngIf=\"errors.length > 0\">{{errors}}</p>\n          <form [formGroup]=\"connectionForm\" (ngSubmit)=\"onLogin()\">\n            <div class=\"form-floating mb-3\">\n              <input type=\"email\" class=\"form-control\" id=\"email\" formControlName=\"email\" required>\n              <label for=\"email\">Adresse email</label>\n              <p class=\"text-danger text-small mt-2\" *ngIf=\"emailControl.errors?.['email']\">L'email est invalide</p>\n            </div>\n            <div class=\"form-floating mb-3\">\n              <input type=\"password\" class=\"form-control\" id=\"password\" formControlName=\"password\" required>\n              <label for=\"password\">Mot de passe</label>\n            </div>\n            <div class=\"d-grid gap-2\">\n              <button type=\"submit\" class=\"btn btn-dark\" [disabled]=\"connectionForm.invalid\">Se connecter</button>\n            </div>\n          </form>\n          <p class=\"mt-3 text-center\">Pas de compte ? <a routerLink=\"/auth/inscription\">S'inscrire maintenant</a></p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}