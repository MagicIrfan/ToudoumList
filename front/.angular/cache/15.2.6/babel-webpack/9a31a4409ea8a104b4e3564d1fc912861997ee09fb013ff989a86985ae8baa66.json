{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class UsersService {\n  constructor() {\n    this.users = [{\n      id: 0,\n      username: \"MagicIrfan\",\n      email: \"bouhenaf.irfan@gmail.com\",\n      password: \"ratio1\"\n    }];\n  }\n  getAllUsers() {\n    return this.users;\n  }\n  getUserById(id) {\n    return this.users.find(user => user.id === id);\n  }\n  isUserExists(email, password) {\n    const user = this.getAllUsers().find(user => user.email === email && user.password === password);\n    return user !== undefined;\n  }\n  isUserExists2(email, username) {\n    const user = this.getAllUsers().find(user => user.email === email || user.username === username);\n    return user !== undefined;\n  }\n  getLastId() {\n    if (this.users.length === 0) {\n      return 0;\n    }\n    const maxId = this.users.reduce((max, user) => Math.max(max, user.id), 0);\n    return maxId + 1;\n  }\n  addUser(newUser) {\n    this.users.push(newUser);\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)();\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,YAAY;EAIvBC;IACE,IAAI,CAACC,KAAK,GAAG,CACX;MACEC,EAAE,EAAE,CAAC;MACLC,QAAQ,EAAC,YAAY;MACrBC,KAAK,EAAC,0BAA0B;MAChCC,QAAQ,EAAC;KACV,CACF;EACH;EAEAC,WAAW;IACT,OAAO,IAAI,CAACL,KAAK;EACnB;EAEAM,WAAW,CAACL,EAAU;IACpB,OAAO,IAAI,CAACD,KAAK,CAACO,IAAI,CAAEC,IAAW,IAAeA,IAAI,CAACP,EAAE,KAAKA,EAAE,CAAS;EAC3E;EAEAQ,YAAY,CAACN,KAAY,EAACC,QAAe;IACvC,MAAMI,IAAI,GAAsB,IAAI,CAACH,WAAW,EAAE,CAACE,IAAI,CAAEC,IAAW,IAAKA,IAAI,CAACL,KAAK,KAAKA,KAAK,IAAIK,IAAI,CAACJ,QAAQ,KAAKA,QAAQ,CAAC;IAC5H,OAAOI,IAAI,KAAKE,SAAS;EAC3B;EAEAC,aAAa,CAACR,KAAY,EAACD,QAAe;IACxC,MAAMM,IAAI,GAAsB,IAAI,CAACH,WAAW,EAAE,CAACE,IAAI,CAAEC,IAAW,IAAKA,IAAI,CAACL,KAAK,KAAKA,KAAK,IAAIK,IAAI,CAACN,QAAQ,KAAKA,QAAQ,CAAC;IAC5H,OAAOM,IAAI,KAAKE,SAAS;EAC3B;EAEAE,SAAS;IACP,IAAI,IAAI,CAACZ,KAAK,CAACa,MAAM,KAAK,CAAC,EAAE;MAC3B,OAAO,CAAC;;IAEV,MAAMC,KAAK,GAAY,IAAI,CAACd,KAAK,CAACe,MAAM,CAAC,CAACC,GAAY,EAAER,IAAU,KAAKS,IAAI,CAACD,GAAG,CAACA,GAAG,EAAER,IAAI,CAACP,EAAE,CAAC,EAAE,CAAC,CAAC;IACjG,OAAOa,KAAK,GAAG,CAAC;EAClB;EAEAI,OAAO,CAACC,OAAa;IACnB,IAAI,CAACnB,KAAK,CAACoB,IAAI,CAACD,OAAO,CAAC;EAC1B;;AA3CWrB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAuB,SAAZvB,YAAY;EAAAwB,YAFX;AAAM","names":["UsersService","constructor","users","id","username","email","password","getAllUsers","getUserById","find","user","isUserExists","undefined","isUserExists2","getLastId","length","maxId","reduce","max","Math","addUser","newUser","push","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Irfan\\Desktop\\todoumlist\\front\\src\\app\\core\\services\\user.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {User} from \"../models/user.model\";\r\nimport {Task} from \"../models/task.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsersService {\r\n\r\n  private users!: User[];\r\n\r\n  constructor() {\r\n    this.users = [\r\n      {\r\n        id: 0,\r\n        username:\"MagicIrfan\",\r\n        email:\"bouhenaf.irfan@gmail.com\",\r\n        password:\"ratio1\"\r\n      }\r\n    ]\r\n  }\r\n\r\n  getAllUsers(): User[] {\r\n    return this.users;\r\n  }\r\n\r\n  getUserById(id: number): User{\r\n    return this.users.find((user : User) : boolean => user.id === id) as User;\r\n  }\r\n\r\n  isUserExists(email:string,password:string) :boolean {\r\n    const user : User | undefined = this.getAllUsers().find((user : User) => user.email === email && user.password === password);\r\n    return user !== undefined;\r\n  }\r\n\r\n  isUserExists2(email:string,username:string) :boolean {\r\n    const user : User | undefined = this.getAllUsers().find((user : User) => user.email === email || user.username === username);\r\n    return user !== undefined;\r\n  }\r\n\r\n  getLastId():number{\r\n    if (this.users.length === 0) {\r\n      return 0;\r\n    }\r\n    const maxId : number = this.users.reduce((max : number, user :User) => Math.max(max, user.id), 0);\r\n    return maxId + 1;\r\n  }\r\n\r\n  addUser(newUser: User):void{\r\n    this.users.push(newUser);\r\n  }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}